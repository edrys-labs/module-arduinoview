{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["const communication = navigator as Navigator & {\n  serial?: any\n}\n\nvar port: any = null\nvar writer: any = null\nvar reader: any = null\n\nvar sandbox = (document.getElementById('sandbox') as HTMLIFrameElement)\n  ?.contentWindow\n\n// an object containing objects that can be distinguished from each other (is used like an enumeration in onReceiveCallback\nvar frmstatus = {\n  no: {},\n  in: {},\n  esc: {},\n}\n\nvar receiverstatus = frmstatus.no\nvar stringReceived = ''\n\n// teletype framing with escaping\nconst SOF = 0x01\nconst EOF = 0x04\nconst ESC = 0x10\nconst ESCMASK = 0x40\n\n//logger is used to debug the sending and receiving of messages logging contains the log,level, which determines how many messages are logged to the debug console\nvar logging = 0\n\nconst buttonConnect = document.getElementById('connect') as HTMLInputElement\nif (buttonConnect) {\n  buttonConnect.onclick = onConnect\n}\n\nfunction sendHostInfo(connected: boolean) {\n  if (sandbox) {\n    sandbox.postMessage(\n      { type: 'hostinfo', data: JSON.stringify({ connected }) },\n      '*'\n    )\n  } else {\n    console.warn('no sandbox')\n  }\n}\n\n//interprets a message from the sandbox and calls a function depending on the type\nfunction receiveFromSandbox(event: MessageEvent, publish = true) {\n  if (sandbox !== event.source) return\n\n  if (window.send && publish) {\n    window.send('receivedFromSandbox', event.data)\n  }\n\n  //we got a letter from sandbox\n  var msg = event.data\n  logger(1, msg.toString())\n\n  switch (msg.type) {\n    case 'raw':\n      writeSerial(msg.data)\n      break\n    case 'frame':\n      sendArrayBuffer(prepareSerialFrame(msg.data))\n\n      if (!publish) {\n        sendToSandbox(msg.data)\n      }\n      break\n    case 'resize':\n      window.resizeTo(msg.data[0], msg.data[1])\n      break\n    default:\n      console.warn('unknown message type')\n  }\n}\n\n//sends a message to the Sandbox\nfunction sendToSandbox(msg: string) {\n  // send a letter to sandbox\n  try {\n    if (sandbox) {\n      sandbox.postMessage({ type: 'frame', data: msg }, '*')\n    }\n  } catch (e) {\n    console.warn('sendToSandbox failed:', e.message)\n  }\n}\n\nfunction logger(lvl, msg) {\n  if (logging >= lvl) console.log(msg)\n}\n\n//\nfunction onReceiveCallback(info) {\n  if (!info) return\n\n  if (window.station === true && window.send) {\n    // send the received data to the host\n    window.send('receive-buffer', info)\n  }\n\n  var bytes = new Uint8Array(info)\n  logger(3, String.fromCharCode.apply(null, bytes))\n\n  for (var i in bytes) {\n    var c = bytes[i]\n    logger(5, String.fromCharCode(c))\n    if (receiverstatus == frmstatus.in) {\n      if (c == SOF) {\n        //lost a frame but go on with a new one\n        receiverstatus = frmstatus.in\n        stringReceived = ''\n      } else if (c == EOF) {\n        //frame complete send its contet to the sandbox\n        logger(1, 'rx Serial Frame: ' + stringReceived)\n        sendToSandbox(stringReceived)\n        stringReceived = ''\n        receiverstatus = frmstatus.no\n      } else if (c == ESC) {\n        receiverstatus = frmstatus.esc\n      } else {\n        stringReceived += String.fromCharCode(c)\n      }\n    } else if (receiverstatus == frmstatus.esc) {\n      stringReceived += String.fromCharCode(ESC ^ ESCMASK)\n      receiverstatus = frmstatus.in\n    } else if (receiverstatus == frmstatus.no) {\n      if (c == SOF) {\n        // start a new frame\n        receiverstatus = frmstatus.in\n        stringReceived = ''\n      }\n    }\n  }\n}\n\n//send an ArrayBuffer to the serial connection\nfunction sendArrayBuffer(buf: ArrayBuffer) {\n  if (window.station === false) {\n    return\n  }\n\n  if (port) {\n    if (!writer) writer = port.writable.getWriter()\n    try {\n      // Write the data to the serial port.\n      writer.write(buf)\n    } catch (error) {\n      console.warn('Failed to write data to the serial port:', error)\n    }\n  } else {\n    logger(2, 'not sent')\n  }\n}\n\n// create a buffer that contains a frame that will be send to the serial connection\nfunction prepareSerialFrame(str: string) {\n  logger(1, 'tx Serial Frame: ' + str)\n  var buf = new ArrayBuffer(str.length * 2 + 2)\n  var bufView = new Uint8Array(buf)\n  var bufi = 0\n  bufView[bufi] = SOF\n  bufi++\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i)\n    if (c == SOF || c == EOF || c == ESC) {\n      bufView[bufi] = ESC\n      bufView[bufi] = c ^ ESCMASK\n      bufi += 2\n    } else {\n      bufView[bufi] = c\n      bufi++\n    }\n  }\n  bufView[bufi] = EOF\n  return buf\n}\n\n// write a string to the serial connection\nfunction writeSerial(str: string) {\n  sendArrayBuffer(convertStringToArrayBuffer(str))\n}\n\n// Convert string to ArrayBuffer\nfunction convertStringToArrayBuffer(str: string) {\n  var buf = new ArrayBuffer(str.length)\n  var bufView = new Uint8Array(buf)\n  for (var i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i)\n  }\n  return buf\n}\n\nasync function readFromPort() {\n  if (!port) return\n\n  reader = port.readable.getReader()\n  try {\n    while (true) {\n      const { value, done } = await reader.read()\n      if (done) {\n        break\n      }\n\n      onReceiveCallback(value) // Reader has been released.\n    }\n  } catch (error) {\n    console.warn('serial communication closed:', error.message)\n  } finally {\n    reader.releaseLock()\n  }\n}\n\nfunction onConnect() {\n  buttonConnect.disabled = true\n  const baudrate = window.document.getElementById(\n    'baudrate'\n  ) as HTMLInputElement\n  const autoconnect = document.getElementById('autoconnect') as HTMLInputElement\n\n  if (window.station === false) {\n    window.send('connect', null)\n    return\n  }\n\n  if (buttonConnect.innerText === 'Connect') {\n    connect().then((ok: boolean) => {\n      buttonConnect.innerText = ok ? 'Disconnect' : 'Connect'\n      buttonConnect.disabled = false\n\n      baudrate.disabled = ok\n      autoconnect.disabled = ok\n\n      window?.update()\n    })\n  } else {\n    disconnect().then(() => {\n      buttonConnect.innerText = 'Connect'\n      buttonConnect.disabled = false\n\n      baudrate.disabled = false\n      autoconnect.disabled = false\n\n      window?.update()\n      console.log('Disconnected', window.state)\n    })\n  }\n}\n\nasync function connect() {\n  try {\n    const autoconnect = document.getElementById(\n      'autoconnect'\n    ) as HTMLInputElement\n    console.log('port:', autoconnect)\n\n    port = null\n    if (autoconnect.checked) {\n      const ports = await communication.serial.getPorts()\n      if (ports.length > 0) {\n        port = ports[0]\n      }\n    }\n\n    if (!port) {\n      port = await communication.serial.requestPort()\n    }\n\n    if (port) {\n      const baudRate = parseInt(\n        (document.getElementById('baudrate') as HTMLInputElement).value\n      )\n      await port.open({ baudRate })\n\n      console.log('Connected to:', baudRate, port.getInfo())\n\n      readFromPort()\n\n      setTimeout(function () {\n        //initSandbox()\n        sendArrayBuffer(prepareSerialFrame('!!'))\n        sendHostInfo(true)\n      }, 2000)\n\n      return true\n    }\n    // Continue with opening the port, etc.\n  } catch (e) {\n    // Handle errors or rejections here\n    console.log('There was an error:', e.message)\n    await disconnect()\n  }\n  return false\n}\n\nasync function disconnect() {\n  if (!port) return\n\n  sendHostInfo(false)\n\n  if (writer) {\n    await writer.releaseLock()\n    await port.writable.close()\n    writer = null\n  }\n\n  if (reader) {\n    await reader.releaseLock()\n    await port.readable.cancel()\n    reader = null\n  }\n\n  await port.close()\n  port = null\n}\n\nfunction initSandbox() {\n  let localSandbox = document.getElementById('sandbox') as HTMLIFrameElement\n\n  if (localSandbox) {\n    localSandbox.src = './sandbox.html'\n    sandbox = (localSandbox as HTMLIFrameElement).contentWindow\n\n    if (window.station === false) {\n      window.send('reload', null)\n      return\n    }\n\n    if (port) {\n      sendArrayBuffer(prepareSerialFrame('!!'))\n      sendHostInfo(true)\n    }\n  }\n}\n\n{\n  const buttonReload = document.getElementById('reload') as HTMLInputElement\n  if (buttonReload) {\n    buttonReload.onclick = initSandbox\n  }\n\n  if (window.station === false) {\n  } else {\n    window.addEventListener('message', receiveFromSandbox, false)\n  }\n\n  window.receiveFromSandBox = function (event, publish) {\n    receiveFromSandbox({ data: event, source: sandbox }, publish)\n  }\n  window.onReceiveCallback = onReceiveCallback\n  window.sendArrayBuffer = sendArrayBuffer\n}\n"],"names":[],"version":3,"file":"index.18e70c72.js.map"}